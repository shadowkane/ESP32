#include <Arduino.h>
#include <U8x8lib.h>
#include <U8g2lib.h>

#define SDA_pin 21 // data
#define SCL_pin 22 // clock

// wifi logo
#define WiFi_Logo_width 60
#define WiFi_Logo_height 36
const uint8_t  WiFi_Logo_bits[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0x07, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xE0, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF,
  0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xFE, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
  0xFF, 0x03, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
  0x00, 0xFF, 0xFF, 0xFF, 0x07, 0xC0, 0x83, 0x01, 0x80, 0xFF, 0xFF, 0xFF,
  0x01, 0x00, 0x07, 0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x0C, 0x00,
  0xC0, 0xFF, 0xFF, 0x7C, 0x00, 0x60, 0x0C, 0x00, 0xC0, 0x31, 0x46, 0x7C,
  0xFC, 0x77, 0x08, 0x00, 0xE0, 0x23, 0xC6, 0x3C, 0xFC, 0x67, 0x18, 0x00,
  0xE0, 0x23, 0xE4, 0x3F, 0x1C, 0x00, 0x18, 0x00, 0xE0, 0x23, 0x60, 0x3C,
  0x1C, 0x70, 0x18, 0x00, 0xE0, 0x03, 0x60, 0x3C, 0x1C, 0x70, 0x18, 0x00,
  0xE0, 0x07, 0x60, 0x3C, 0xFC, 0x73, 0x18, 0x00, 0xE0, 0x87, 0x70, 0x3C,
  0xFC, 0x73, 0x18, 0x00, 0xE0, 0x87, 0x70, 0x3C, 0x1C, 0x70, 0x18, 0x00,
  0xE0, 0x87, 0x70, 0x3C, 0x1C, 0x70, 0x18, 0x00, 0xE0, 0x8F, 0x71, 0x3C,
  0x1C, 0x70, 0x18, 0x00, 0xC0, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x08, 0x00,
  0xC0, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0x0C, 0x00, 0x80, 0xFF, 0xFF, 0x1F,
  0x00, 0x00, 0x06, 0x00, 0x80, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x07, 0x00,
  0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0xF8, 0xFF, 0xFF,
  0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0x01, 0x00, 0x00,
  0x00, 0x00, 0xFC, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF,
  0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0x1F, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x80, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

#define WiFi_Logo_width_2 30
#define WiFi_Logo_height_2 19
static unsigned char  WiFi_Logo_bits_2[] = {
  0x00, 0x00, 0x00, 0x00,
  0x00, 0xf0, 0x03, 0x00, 
  0x00, 0xfc, 0x0f, 0x00, 
  0x00, 0xfe, 0x1f, 0x00,
  0xe0, 0xff, 0xff, 0x00, 
  0xf0, 0xff, 0x81, 0x03, 
  0xf8, 0xff, 0x00, 0x02,
  0xd8, 0x6a, 0xbe, 0x06,
  0x98, 0x7a, 0x06, 0x04,
  0xb8, 0x6a, 0x9e, 0x04,
  0x38, 0x6c, 0x86, 0x04,
  0x38, 0x6d, 0x86, 0x06,
  0xf8, 0x7f, 0x00, 0x02,
  0xf0, 0x3f, 0x00, 0x03,
  0xc0, 0xff, 0xff, 0x01,
  0x00, 0xfe, 0x0f, 0x00,
  0x00, 0xf8, 0x07, 0x00,
  0x00, 0xe0, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00,
};

#define WiFi_Logo_width_3 32
#define WiFi_Logo_height_3 16
static const unsigned char  WiFi_Logo_bits_3[] = U8X8_PROGMEM {
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
};


// because our oled display is faulty(skipping lines) we will use 128x32 resolution.
// F use full buffer which mean copy all the display data in the CPU memory then draw it on the display. use this mode if you have enough RAM in your CPU
// 1 and 2 mean use pagination. 1 load only one page and 2 means load 2 pages in the CPU RAM

//U8X8_SSD1306_128X64_NONAME_HW_I2C oledDisplay(U8X8_PIN_NONE);
//U8X8_SSD1306_128X32_UNIVISION_HW_I2C oledDisplay(U8X8_PIN_NONE);
//U8G2_SSD1306_128X64_NONAME_F_HW_I2C oledDisplay2(U8G2_R0, U8X8_PIN_NONE, SCL_pin, SDA_pin);
U8G2_SSD1306_128X32_UNIVISION_F_HW_I2C oledDisplay2(U8G2_R0, U8X8_PIN_NONE, SCL_pin, SDA_pin);

void setup() {
  // put your setup code here, to run once:
  // configure serial monitoring
  Serial.begin(115200);
  Serial.println("Start program");
  // configure and initiate OLED display
  /* using U8X8 library */
  /*
  oledDisplay.begin();
  oledDisplay.setPowerSave(0);
  oledDisplay.setFont(u8x8_font_amstrad_cpc_extended_f);
  oledDisplay.clear();
  oledDisplay.setCursor(0,0);
  oledDisplay.drawGlyph(0,0,'A');
  */
  
  /* using U8G2 library */
  //oledDisplay2.setI2CAddress(0x3C);
  oledDisplay2.begin();
  oledDisplay2.clearBuffer();
  oledDisplay2.setPowerSave(0);
  oledDisplay2.drawBox(0,1,128,3);
  oledDisplay2.sendBuffer();
  delay(1000);
  oledDisplay2.clearBuffer();
  oledDisplay2.drawFrame(0,0,128,64);
  oledDisplay2.drawFrame(2,2,124,60);
  oledDisplay2.drawFrame(4,4,120,56);
  oledDisplay2.sendBuffer();
  delay(1000);
  oledDisplay2.clearBuffer();
  oledDisplay2.drawFrame(1,1,126,62);
  oledDisplay2.drawFrame(3,3,122,58);
  oledDisplay2.drawFrame(5,5,118,54);
  oledDisplay2.sendBuffer();
  delay(1000);
  oledDisplay2.clearBuffer();
  oledDisplay2.setFont(u8g2_font_courR18_tr);
  // to draw correctly a string, set the y position to the height of the used font
  oledDisplay2.setCursor(0,14);
  oledDisplay2.print("Hello");
  oledDisplay2.sendBuffer();
  delay(1000);
}

void loop() {
  // put your main code here, to run repeatedly:
  /* using U8X8 library */
  // use pages if you are not using the full buffer mode
  oledDisplay2.firstPage();
  do{
    oledDisplay2.clearBuffer();
    oledDisplay2.setFont(u8g2_font_ncenB14_tr);
    oledDisplay2.drawStr(0,15,"Hello World!");
    oledDisplay2.sendBuffer();
    delay(1000);
  }while(oledDisplay2.nextPage());

  oledDisplay2.setBitmapMode(1);
  oledDisplay2.clearBuffer();
  oledDisplay2.clearDisplay();
  oledDisplay2.clear();
  oledDisplay2.clearWriteError();
  
  oledDisplay2.drawXBM(1, 1, WiFi_Logo_width_3, WiFi_Logo_width_3, WiFi_Logo_bits_3);
  oledDisplay2.sendBuffer();
  delay(5000);
  
}